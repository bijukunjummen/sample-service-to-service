{"version":3,"sources":["main-view/MainView.tsx","main-view/client-calls.ts","App.tsx","registerServiceWorker.js","index.js"],"names":["FormErrors","formErrors","Object","keys","map","fieldName","i","length","className","ProgressBar","loading","role","ResponseDisplay","responseMessage","responseError","htmlFor","id","received","ack","MainForm","payload","useState","delay","payloadValid","delayValid","formValid","undefined","callState","setCallState","passthroughCallAndSetState","prevState","fetch","headers","method","body","JSON","stringify","then","response","json","data","restCalls","resp","catch","error","message","handleUserInput","e","name","target","value","validateField","fieldValidationErrors","isNaN","validateForm","onSubmit","preventDefault","placeholder","onChange","type","event","disabled","Root","to","exact","path","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.31d71f8e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport * as restCalls from \"./client-calls\";\nimport { MessageAck } from \"./MessageAck\";\n\nexport const FormErrors: React.FunctionComponent<{ formErrors: Record<string, string> }> = ({ formErrors }) => (\n  <div>\n    {Object.keys(formErrors).map((fieldName, i) => {\n      if (formErrors[fieldName].length > 0) {\n        return (\n          <p key={fieldName} className=\"alert alert-warning\">{fieldName} {formErrors[fieldName]}</p>\n        )\n      } else {\n        return '';\n      }\n    })}\n  </div>\n)\n\nexport const ProgressBar = ({ loading }: { loading: boolean }) =>\n  <div className=\"row\">\n    <div className=\"col-sm-2\">\n    </div>\n    <div className=\"col-sm-8\">\n      {loading &&\n        <div className=\"progress\">\n          <div className=\"progress-bar progress-bar-striped progress-bar-animated w-100\" role=\"progressbar\"\n            aria-valuenow={100}\n            aria-valuemin={0}\n            aria-valuemax={100}></div>\n        </div>\n      }\n      <div className=\"col-sm-2\">\n      </div>\n    </div>\n  </div>\n\nexport const ResponseDisplay = ({ responseMessage, responseError }: { responseMessage?: MessageAck, responseError: string }) => {\n  return <div className=\"row mt-3\">\n    <div className=\"col-sm-12\">\n      {responseMessage &&\n        <div className=\"alert alert-success\">\n          <div className=\"row\">\n            <label htmlFor=\"id\" className=\"col-sm-2\">Id : </label>\n            <span className=\"col-sm-4\">{responseMessage.id}</span>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"message\" className=\"col-sm-2\">Recieved : </label>\n            <span className=\"col-sm-4\">{responseMessage.received}</span>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"acked\" className=\"col-sm-2\">Acked : </label>\n            <span className=\"col-sm-4\">{responseMessage.ack}</span>\n          </div>\n        </div>\n      }\n\n      {responseError &&\n        <div className=\"alert alert-warning\">\n          <div className=\"row\">\n            <span className=\"col-sm-4\">{responseError}</span>\n          </div>\n        </div>\n      }\n    </div>\n  </div>\n};\n\ninterface CallState {\n  payload: string;\n  delay: number;\n  formErrors: { payload: string, delay: string };\n  loading: boolean;\n  payloadValid: boolean;\n  delayValid: boolean;\n  formValid: boolean;\n  responseMessage?: MessageAck;\n  responseError: string;\n}\n\nexport const MainForm = ({ payload }: { payload: string }) => {\n  const [callState, setCallState] = useState<CallState>({\n    payload: \"dummy payload\",\n    delay: 100,\n    formErrors: { payload: '', delay: '' },\n    loading: false,\n    payloadValid: true,\n    delayValid: true,\n    formValid: true,\n    responseMessage: undefined,\n    responseError: \"\"\n  });\n\n  const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    if (callState.loading) {\n      e.preventDefault();\n      return;\n    }\n    setCallState(prevState => ({ ...prevState, responseError: \"\" }));\n    setCallState(prevState => ({ ...prevState, responseMessage: undefined }));\n\n    passthroughCallAndSetState(callState.payload, callState.delay);\n    e.preventDefault()\n  }\n\n  const passthroughCallAndSetState = (payload: string, delay: number) => {\n    setCallState(prevState => ({ ...prevState, loading: true }));\n    restCalls\n      .makePassthroughCall(payload, delay)\n      .then(resp => {\n        setCallState(prevState => ({ ...prevState, responseMessage: resp, loading: false }));\n      }).catch(error => {\n        setCallState(prevState => ({ ...prevState, responseError: error.message, loading: false }));\n      });\n  }\n\n  const handleUserInput = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    validateField(name, value)\n  }\n\n  const validateField = (fieldName: string, value: any) => {\n    let fieldValidationErrors = callState.formErrors;\n    let payloadValid = callState.payloadValid;\n    let delayValid = callState.delayValid;\n\n    switch (fieldName) {\n      case 'payload':\n        payloadValid = value.length >= 2;\n        fieldValidationErrors.payload = payloadValid ? '' : ' should have atleast 2 characters';\n        break;\n      case 'delay':\n        delayValid = !isNaN(value)\n        fieldValidationErrors.delay = delayValid ? '' : ' is not valid';\n        break;\n      default:\n        break;\n    }\n    setCallState(prevState => ({\n      ...prevState,\n      [fieldName]: value,\n      formErrors: fieldValidationErrors,\n      payloadValid: payloadValid,\n      delayValid: delayValid\n    }));\n\n    validateForm()\n  }\n\n  const validateForm = () => {\n    setCallState(prevState => ({ ...prevState, formValid: prevState.payloadValid && prevState.delayValid }));\n  }\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <h3>Send a request</h3>\n          <p className=\"lead alert alert-info\">\n            The request will be sent to the appication which will reply after the specified \"delay\"\n          </p>\n        </div>\n        <div>\n          <FormErrors formErrors={callState.formErrors} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <form onSubmit={handleFormSubmit}>\n            <div className=\"form-group row\">\n              <label htmlFor=\"payload\" className=\"col-sm-2 col-form-label\">Payload</label>\n              <div className=\"col-sm-10\">\n                <textarea name=\"payload\" className=\"form-control\" placeholder=\"Payload\"\n                  onChange={handleUserInput} value={callState.payload}></textarea>\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <label htmlFor=\"delay\" className=\"col-sm-2 col-form-label\">Delay (in ms)</label>\n              <div className=\"col-sm-10\">\n                <input name=\"delay\" type=\"number\" className=\"form-control\" placeholder=\"delay\"\n                  value={callState.delay} onChange={(event) => handleUserInput(event)} />\n\n              </div>\n            </div>\n            <div className=\"form-group row\">\n              <div className=\"col-sm-10\">\n                {!callState.loading &&\n                  <button name=\"submit\" className=\"btn btn-primary\" disabled={!callState.formValid}>Submit</button>\n                }\n                {callState.loading &&\n                  <button name=\"submit\" className=\"btn btn-primary disabled\"\n                    disabled={!callState.formValid}>Submit</button>\n                }\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n      <ProgressBar loading={callState.loading} />\n      <ResponseDisplay responseMessage={callState.responseMessage} responseError={callState.responseError} />\n    </div>\n  );\n}","import { MessageAck } from './MessageAck';\n\nexport function makePassthroughCall(payload: string, delay: number): Promise<MessageAck> {\n    const url = \"/messages\"\n    return fetch(url, {\n        headers: { \"Content-Type\": \"application/json\" },\n        method: \"POST\",\n        body: JSON.stringify({ payload: payload, delay: delay })\n    })\n    .then((response) =>  response.json())\n    .then((data) => data as MessageAck)\n}\n","import React from \"react\";\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport {MainForm} from \"./main-view/MainView\"\n\n\nconst Root = () => (\n  <Router>\n    <div>\n      <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n        <Link to=\"/\" className=\"navbar-brand\">Sample KNative Client</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                data-target=\"#navbarsExampleDefault\"\n                aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <Link to=\"/\" className=\"nav-link\">Home</Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <div className=\"containerFluid\">\n        <div className=\"row\">\n          <div className=\"col-sm-10 offset-sm-1\">\n            <Route exact path=\"/\" component={MainForm}/>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  </Router>\n);\n\nexport default Root;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css'\nimport Root from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<Root />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}