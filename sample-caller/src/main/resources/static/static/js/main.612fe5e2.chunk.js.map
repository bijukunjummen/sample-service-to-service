{"version":3,"sources":["main-view/client-calls.ts","main-view/MainView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["makePassthroughCall","message","fetch","headers","method","body","JSON","stringify","then","response","json","data","FormErrors","formErrors","Object","keys","map","fieldName","i","length","className","ProgressBar","loading","role","ResponseDisplay","responseMessage","responseError","htmlFor","id","received","callerHeaders","entries","value","index","producerHeaders","callerMetadata","clusterName","clusterLocation","producerMetadata","statusCode","roundTripTimeMillis","MainForm","payload","useState","delay","responseCode","formValid","undefined","callState","setCallState","passthroughCallAndSetState","prevState","restCalls","resp","catch","error","handleUserInput","e","name","target","validateField","fieldValidationErrors","payloadValid","delayValid","isNaN","Number","onSubmit","preventDefault","placeholder","onChange","type","disabled","Root","to","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"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","file":"static/js/main.612fe5e2.chunk.js","sourcesContent":["import { MessageAck, Message } from './models';\n\nexport function makePassthroughCall(message: Message): Promise<MessageAck> {\n    const url = \"/caller/messages\"\n    return fetch(url, {\n        headers: { \"Content-Type\": \"application/json\" },\n        method: \"POST\",\n        body: JSON.stringify(message)\n    })\n    .then((response) =>  response.json())\n    .then((data) => data as MessageAck)\n}\n","import React, { useState } from \"react\";\nimport * as restCalls from \"./client-calls\";\nimport { MessageAck } from \"./models\";\n\nexport const FormErrors: React.FunctionComponent<{ formErrors: Record<string, string> }> = ({ formErrors }) => (\n    <div>\n        {Object.keys(formErrors).map((fieldName, i) => {\n            if (formErrors[fieldName].length > 0) {\n                return (\n                    <p key={fieldName} className=\"alert alert-warning\">{fieldName} {formErrors[fieldName]}</p>\n                )\n            } else {\n                return '';\n            }\n        })}\n    </div>\n)\n\nexport const ProgressBar = ({ loading }: { loading: boolean }) =>\n    <div className=\"row\">\n        <div className=\"col-sm-2\">\n        </div>\n        <div className=\"col-sm-8\">\n            {loading &&\n                <div className=\"progress\">\n                    <div className=\"progress-bar progress-bar-striped progress-bar-animated w-100\" role=\"progressbar\"\n                        aria-valuenow={100}\n                        aria-valuemin={0}\n                        aria-valuemax={100}></div>\n                </div>\n            }\n            <div className=\"col-sm-2\">\n            </div>\n        </div>\n    </div>\n\nexport const ResponseDisplay = ({ responseMessage, responseError }: { responseMessage?: MessageAck, responseError?: string }) => {\n    return <div className=\"row mt-3\">\n        <div className=\"col-sm-12\">\n            {responseMessage &&\n                <div className=\"alert alert-success\">\n                    <div className=\"row\">\n                        <label htmlFor=\"id\" className=\"col-sm-2\">Id : </label>\n                        <span className=\"col-sm-8\">{responseMessage.id}</span>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"message\" className=\"col-sm-2\">Recieved : </label>\n                        <span className=\"col-sm-8\">{responseMessage.received}</span>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"ack\" className=\"col-sm-2\">Caller Headers: </label>\n                        <span className=\"col-sm-8\">\n                            <div>\n                                {responseMessage.callerHeaders &&\n                                    Object.entries(responseMessage.callerHeaders).map((value: [string, any], index: number) =>\n                                        <div className=\"row\" key={value[0]}>\n                                            <label className=\"col-sm-4\">{value[0]}</label><span\n                                                className=\"col-sm-8\">{value[1]}</span>\n                                        </div>\n                                    )}\n                            </div>\n                        </span>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"ack\" className=\"col-sm-2\">Producer Headers: </label>\n                        <span className=\"col-sm-8\">\n                            <div>\n                                {responseMessage.producerHeaders &&\n                                    Object.entries(responseMessage.producerHeaders).map((value: [string, any], index: number) =>\n                                        <div className=\"row\" key={value[0]}>\n                                            <label className=\"col-sm-4\">{value[0]}</label><span\n                                                className=\"col-sm-8\">{value[1]}</span>\n                                        </div>\n                                    )}\n                            </div>\n                        </span>\n                    </div>\n                    {responseMessage.callerMetadata &&\n                        <div className=\"row\">\n                            <label htmlFor=\"ack\" className=\"col-sm-2\">Caller Metadata: </label>\n                            <span className=\"col-sm-8\">\n                                <div>\n                                    <div className=\"row\">\n                                        <label className=\"col-sm-4\">Cluster Name</label><span\n                                            className=\"col-sm-8\">{responseMessage.callerMetadata.clusterName}</span>\n                                    </div>\n                                    <div className=\"row\">\n                                        <label className=\"col-sm-4\">Cluster Location</label><span\n                                            className=\"col-sm-8\">{responseMessage.callerMetadata.clusterLocation}</span>\n                                    </div>\n                                </div>\n                            </span>\n                        </div>\n                    }\n                    {responseMessage.producerMetadata &&\n                        <div className=\"row\">\n                            <label htmlFor=\"ack\" className=\"col-sm-2\">Producer Metadata: </label>\n                            <span className=\"col-sm-8\">\n                                <div>\n                                    <div className=\"row\">\n                                        <label className=\"col-sm-4\">Cluster Name</label><span\n                                            className=\"col-sm-8\">{responseMessage.producerMetadata.clusterName}</span>\n                                    </div>\n                                    <div className=\"row\">\n                                        <label className=\"col-sm-4\">Cluster Location</label><span\n                                            className=\"col-sm-8\">{responseMessage.producerMetadata.clusterLocation}</span>\n                                    </div>\n                                </div>\n                            </span>\n                        </div>\n                    }\n\n                    <div className=\"row\">\n                        <label htmlFor=\"statusCode\" className=\"col-sm-2\">Status Code : </label>\n                        <span className=\"col-sm-8\">{responseMessage.statusCode}</span>\n                    </div>\n                    <div className=\"row\">\n                        <label htmlFor=\"roundTripTimeMillis\" className=\"col-sm-2\">Round Trip Time(millis): </label>\n                        <span className=\"col-sm-8\">{responseMessage.roundTripTimeMillis}</span>\n                    </div>\n                </div>\n            }\n\n            {responseError &&\n                <div className=\"alert alert-warning\">\n                    <div className=\"row\">\n                        <span className=\"col-sm-8\">{responseError}</span>\n                    </div>\n                </div>\n            }\n        </div>\n    </div>\n};\n\ninterface CallState {\n    payload: string;\n    delay: number;\n    responseCode: number;\n    formErrors: Record<string, string>\n    loading: boolean;\n    formValid: boolean;\n    responseMessage?: MessageAck;\n    responseError?: string;\n}\n\nexport const MainForm = ({ payload }: { payload: string }) => {\n    const [callState, setCallState] = useState<CallState>({\n        payload: \"dummy payload\",\n        delay: 100,\n        responseCode: 200,\n        formErrors: {},\n        loading: false,\n        formValid: true,\n        responseMessage: undefined,\n        responseError: undefined\n    });\n\n    const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        if (callState.loading) {\n            e.preventDefault();\n            return;\n        }\n        setCallState(prevState => ({ ...prevState, responseError: undefined, responseMessage: undefined }));\n        passthroughCallAndSetState(callState.payload, callState.delay, callState.responseCode);\n        e.preventDefault()\n    }\n\n    const passthroughCallAndSetState = (payload: string, delay: number, responseCode: number = 200) => {\n        setCallState(prevState => ({ ...prevState, loading: true }));\n        restCalls\n            .makePassthroughCall({ payload: payload, delay: delay, responseCode: responseCode })\n            .then(resp => {\n                setCallState(prevState => ({ ...prevState, responseMessage: resp, loading: false }));\n            }).catch(error => {\n                setCallState(prevState => ({ ...prevState, responseError: error.message, loading: false }));\n            });\n    }\n\n    const handleUserInput = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n        const name = e.target.name;\n        const value = e.target.value;\n        validateField(name, value)\n    }\n\n    const validateField = (fieldName: string, value: any) => {\n        let fieldValidationErrors = callState.formErrors;\n        let payloadValid = true;\n        let delayValid = true;\n\n        switch (fieldName) {\n            case 'payload':\n                payloadValid = value.length >= 2;\n                fieldValidationErrors.payload = payloadValid ? '' : ' should have atleast 2 characters';\n                break;\n            case 'delay':\n                delayValid = !isNaN(value) && Number(value) >= 0;\n                fieldValidationErrors.delay = delayValid ? '' : ' is not valid';\n                break;\n            default:\n                break;\n        }\n        setCallState(prevState => ({\n            ...prevState,\n            [fieldName]: value,\n            formErrors: fieldValidationErrors,\n            formValid: payloadValid && delayValid\n        }));\n    }\n\n    return (\n        <div>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <h3>Send a request</h3>\n                    <p className=\"lead alert alert-info\">\n                        The request will be sent to the appication which will reply after the specified \"delay\"\n                    </p>\n                </div>\n                <div>\n                    <FormErrors formErrors={callState.formErrors} />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-sm-12\">\n                    <form onSubmit={handleFormSubmit}>\n                        <div className=\"form-group row mb-3\">\n                            <label htmlFor=\"payload\" className=\"col-sm-2 col-form-label\">Payload</label>\n                            <div className=\"col-sm-10\">\n                                <textarea name=\"payload\" className=\"form-control\" placeholder=\"Payload\"\n                                    onChange={handleUserInput} value={callState.payload}></textarea>\n                            </div>\n                        </div>\n                        <div className=\"form-group row mb-3\">\n                            <label htmlFor=\"delay\" className=\"col-sm-2 col-form-label\">Delay (in ms)</label>\n                            <div className=\"col-sm-10\">\n                                <input name=\"delay\" type=\"number\" className=\"form-control\" placeholder=\"delay\"\n                                    value={callState.delay} onChange={handleUserInput} />\n\n                            </div>\n                        </div>\n                        <div className=\"form-group row mb-3\">\n                            <label htmlFor=\"delay\" className=\"col-sm-2 col-form-label\">Response Status Code</label>\n                            <div className=\"col-sm-10\">\n                                <input name=\"responseCode\" type=\"number\" className=\"form-control\"\n                                    placeholder=\"status code\"\n                                    value={callState.responseCode} onChange={handleUserInput} />\n\n                            </div>\n                        </div>\n                        <div className=\"form-group row mb-3\">\n                            <div className=\"col-sm-10\">\n                                {!callState.loading &&\n                                    <button name=\"submit\" className=\"btn btn-primary\"\n                                        disabled={!callState.formValid}>Submit</button>\n                                }\n                                {callState.loading &&\n                                    <button name=\"submit\" className=\"btn btn-primary disabled\"\n                                        disabled={!callState.formValid}>Submit</button>\n                                }\n                            </div>\n                        </div>\n                    </form>\n                </div>\n            </div>\n            <ProgressBar loading={callState.loading} />\n            <ResponseDisplay responseMessage={callState.responseMessage} responseError={callState.responseError} />\n        </div>\n    );\n}","import React from \"react\";\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport {MainForm} from \"./main-view/MainView\"\n\n\nconst Root = () => (\n  <Router>\n    <div>\n      <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n        <Link to=\"/\" className=\"navbar-brand\">Service To Service Call Client</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                data-target=\"#navbarsExampleDefault\"\n                aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <Link to=\"/\" className=\"nav-link\">Home</Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <div className=\"containerFluid\">\n        <div className=\"row\">\n          <div className=\"col-sm-10 offset-sm-1\">\n            <Route exact path=\"/\" component={MainForm}/>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  </Router>\n);\n\nexport default Root;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}