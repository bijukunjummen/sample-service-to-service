{"version":3,"sources":["main-view/client-calls.ts","main-view/MainView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["makePassthroughCall","message","fetch","headers","method","body","JSON","stringify","then","response","json","data","FormErrors","formErrors","Object","keys","map","fieldName","i","length","className","ProgressBar","loading","role","ResponseDisplay","responseMessage","responseError","htmlFor","id","received","ack","statusCode","roundTripTimeMillis","MainForm","payload","useState","delay","responseCode","formValid","undefined","callState","setCallState","passthroughCallAndSetState","prevState","restCalls","resp","catch","error","handleUserInput","e","name","target","value","validateField","fieldValidationErrors","payloadValid","delayValid","isNaN","Number","onSubmit","preventDefault","placeholder","onChange","type","disabled","Root","to","exact","path","component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"mPAEO,SAASA,EAAoBC,GAEhC,OAAOC,MADK,mBACM,CACdC,QAAS,CAAE,eAAgB,oBAC3BC,OAAQ,OACRC,KAAMC,KAAKC,UAAUN,KAExBO,MAAK,SAACC,GAAD,OAAeA,EAASC,UAC7BF,MAAK,SAACG,GAAD,OAAUA,K,WCNPC,EAA8E,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAH,OACzF,8BACGC,OAAOC,KAAKF,GAAYG,KAAI,SAACC,EAAWC,GACvC,OAAIL,EAAWI,GAAWE,OAAS,EAE/B,oBAAmBC,UAAU,sBAA7B,UAAoDH,EAApD,IAAgEJ,EAAWI,KAAnEA,GAGH,SAMFI,EAAc,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OACzB,sBAAKF,UAAU,MAAf,UACE,qBAAKA,UAAU,aAEf,sBAAKA,UAAU,WAAf,UACGE,GACC,qBAAKF,UAAU,WAAf,SACE,qBAAKA,UAAU,gEAAgEG,KAAK,cAClF,gBAAe,IACf,gBAAe,EACf,gBAAe,QAGrB,qBAAKH,UAAU,oBAKRI,EAAkB,SAAC,GAAkG,IAAhGC,EAA+F,EAA/FA,gBAAiBC,EAA8E,EAA9EA,cACjD,OAAO,qBAAKN,UAAU,WAAf,SACL,sBAAKA,UAAU,YAAf,UACGK,GACC,sBAAKL,UAAU,sBAAf,UACE,sBAAKA,UAAU,MAAf,UACE,uBAAOO,QAAQ,KAAKP,UAAU,WAA9B,mBACA,sBAAMA,UAAU,WAAhB,SAA4BK,EAAgBG,QAE9C,sBAAKR,UAAU,MAAf,UACE,uBAAOO,QAAQ,UAAUP,UAAU,WAAnC,yBACA,sBAAMA,UAAU,WAAhB,SAA4BK,EAAgBI,cAE9C,sBAAKT,UAAU,MAAf,UACE,uBAAOO,QAAQ,MAAMP,UAAU,WAA/B,oBACA,sBAAMA,UAAU,WAAhB,SAA4BK,EAAgBK,SAE9C,sBAAKV,UAAU,MAAf,UACE,uBAAOO,QAAQ,aAAaP,UAAU,WAAtC,4BACA,sBAAMA,UAAU,WAAhB,SAA4BK,EAAgBM,gBAE7C,sBAAKX,UAAU,MAAf,UACC,uBAAOO,QAAQ,sBAAsBP,UAAU,WAA/C,uCACA,sBAAMA,UAAU,WAAhB,SAA4BK,EAAgBO,4BAKjDN,GACC,qBAAKN,UAAU,sBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,sBAAMA,UAAU,WAAhB,SAA4BM,cAmB3BO,EAAW,SAAC,GAAqC,EAAnCC,QAAoC,IAC7D,EAAkCC,mBAAoB,CACpDD,QAAS,gBACTE,MAAO,IACPC,aAAc,IACdxB,WAAY,GACZS,SAAS,EACTgB,WAAW,EACXb,qBAAiBc,EACjBb,mBAAea,IARjB,mBAAOC,EAAP,KAAkBC,EAAlB,KAqBMC,EAA6B,SAACR,EAAiBE,GAA+C,IAAhCC,EAA+B,uDAAR,IACzFI,GAAa,SAAAE,GAAS,kCAAUA,GAAV,IAAqBrB,SAAS,OACpDsB,EACuB,CAAEV,QAASA,EAASE,MAAOA,EAAOC,aAAcA,IACpE7B,MAAK,SAAAqC,GACJJ,GAAa,SAAAE,GAAS,kCAAUA,GAAV,IAAqBlB,gBAAiBoB,EAAMvB,SAAS,UAC1EwB,OAAM,SAAAC,GACPN,GAAa,SAAAE,GAAS,kCAAUA,GAAV,IAAqBjB,cAAeqB,EAAM9C,QAASqB,SAAS,WAIlF0B,EAAkB,SAACC,GACvB,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MACvBC,EAAcH,EAAME,IAGhBC,EAAgB,SAACpC,EAAmBmC,GACxC,IAAIE,EAAwBd,EAAU3B,WAClC0C,GAAe,EACfC,GAAa,EAEjB,OAAQvC,GACN,IAAK,UACHsC,EAAeH,EAAMjC,QAAU,EAC/BmC,EAAsBpB,QAAUqB,EAAe,GAAK,oCACpD,MACF,IAAK,QACHC,GAAcC,MAAML,IAAUM,OAAON,GAAS,EAC9CE,EAAsBlB,MAAQoB,EAAa,GAAK,gBAKpDf,GAAa,SAAAE,GAAS,wCACjBA,GADiB,uBAEnB1B,EAAYmC,GAFO,2BAGRE,GAHQ,0BAITC,GAAgBC,GAJP,QAQxB,OACE,gCACE,sBAAKpC,UAAU,MAAf,UACE,sBAAKA,UAAU,YAAf,UACE,gDACA,mBAAGA,UAAU,wBAAb,wGAIF,8BACE,cAAC,EAAD,CAAYP,WAAY2B,EAAU3B,kBAGtC,qBAAKO,UAAU,MAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uBAAMuC,SAnEW,SAACV,GACpBT,EAAUlB,UAIdmB,GAAa,SAAAE,GAAS,kCAAUA,GAAV,IAAqBjB,mBAAea,EAAWd,qBAAiBc,OACtFG,EAA2BF,EAAUN,QAASM,EAAUJ,MAAOI,EAAUH,eAJvEY,EAAEW,kBAiEE,UACE,sBAAKxC,UAAU,sBAAf,UACE,uBAAOO,QAAQ,UAAUP,UAAU,0BAAnC,qBACA,qBAAKA,UAAU,YAAf,SACE,0BAAU8B,KAAK,UAAU9B,UAAU,eAAeyC,YAAY,UAC5DC,SAAUd,EAAiBI,MAAOZ,EAAUN,eAGlD,sBAAKd,UAAU,sBAAf,UACE,uBAAOO,QAAQ,QAAQP,UAAU,0BAAjC,2BACA,qBAAKA,UAAU,YAAf,SACE,uBAAO8B,KAAK,QAAQa,KAAK,SAAS3C,UAAU,eAAeyC,YAAY,QACrET,MAAOZ,EAAUJ,MAAO0B,SAAUd,SAIxC,sBAAK5B,UAAU,sBAAf,UACE,uBAAOO,QAAQ,QAAQP,UAAU,0BAAjC,kCACA,qBAAKA,UAAU,YAAf,SACE,uBAAO8B,KAAK,eAAea,KAAK,SAAS3C,UAAU,eAAeyC,YAAY,cAC5ET,MAAOZ,EAAUH,aAAcyB,SAAUd,SAI/C,qBAAK5B,UAAU,sBAAf,SACE,sBAAKA,UAAU,YAAf,WACIoB,EAAUlB,SACV,wBAAQ4B,KAAK,SAAS9B,UAAU,kBAAkB4C,UAAWxB,EAAUF,UAAvE,oBAEDE,EAAUlB,SACT,wBAAQ4B,KAAK,SAAS9B,UAAU,2BAC9B4C,UAAWxB,EAAUF,UADvB,gCAQZ,cAAC,EAAD,CAAahB,QAASkB,EAAUlB,UAChC,cAAC,EAAD,CAAiBG,gBAAiBe,EAAUf,gBAAiBC,cAAec,EAAUd,oBCxK7EuC,EA/BF,kBACX,cAAC,IAAD,UACE,gCACE,sBAAK7C,UAAU,wDAAf,UACE,cAAC,IAAD,CAAM8C,GAAG,IAAI9C,UAAU,eAAvB,4CACA,wBAAQA,UAAU,iBAAiB2C,KAAK,SAAS,cAAY,WACrD,cAAY,yBACZ,gBAAc,wBAAwB,gBAAc,QAAQ,aAAW,oBAF/E,SAGE,sBAAM3C,UAAU,0BAGlB,qBAAKA,UAAU,2BAA2BQ,GAAG,wBAA7C,SACE,oBAAIR,UAAU,qBAAd,SACE,oBAAIA,UAAU,kBAAd,SACE,cAAC,IAAD,CAAM8C,GAAG,IAAI9C,UAAU,WAAvB,2BAKR,qBAAKA,UAAU,iBAAf,SACE,qBAAKA,UAAU,MAAf,SACE,qBAAKA,UAAU,wBAAf,SACE,cAAC,IAAD,CAAO+C,OAAK,EAACC,KAAK,IAAIC,UAAWpC,gBCb9BqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBhE,MAAK,YAAkD,IAA/CiE,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCFdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.64634a9e.chunk.js","sourcesContent":["import { MessageAck, Message } from './models';\n\nexport function makePassthroughCall(message: Message): Promise<MessageAck> {\n    const url = \"/caller/messages\"\n    return fetch(url, {\n        headers: { \"Content-Type\": \"application/json\" },\n        method: \"POST\",\n        body: JSON.stringify(message)\n    })\n    .then((response) =>  response.json())\n    .then((data) => data as MessageAck)\n}\n","import React, { useState } from \"react\";\nimport * as restCalls from \"./client-calls\";\nimport { MessageAck } from \"./models\";\n\nexport const FormErrors: React.FunctionComponent<{ formErrors: Record<string, string> }> = ({ formErrors }) => (\n  <div>\n    {Object.keys(formErrors).map((fieldName, i) => {\n      if (formErrors[fieldName].length > 0) {\n        return (\n          <p key={fieldName} className=\"alert alert-warning\">{fieldName} {formErrors[fieldName]}</p>\n        )\n      } else {\n        return '';\n      }\n    })}\n  </div>\n)\n\nexport const ProgressBar = ({ loading }: { loading: boolean }) =>\n  <div className=\"row\">\n    <div className=\"col-sm-2\">\n    </div>\n    <div className=\"col-sm-8\">\n      {loading &&\n        <div className=\"progress\">\n          <div className=\"progress-bar progress-bar-striped progress-bar-animated w-100\" role=\"progressbar\"\n            aria-valuenow={100}\n            aria-valuemin={0}\n            aria-valuemax={100}></div>\n        </div>\n      }\n      <div className=\"col-sm-2\">\n      </div>\n    </div>\n  </div>\n\nexport const ResponseDisplay = ({ responseMessage, responseError }: { responseMessage?: MessageAck, responseError?: string }) => {\n  return <div className=\"row mt-3\">\n    <div className=\"col-sm-12\">\n      {responseMessage &&\n        <div className=\"alert alert-success\">\n          <div className=\"row\">\n            <label htmlFor=\"id\" className=\"col-sm-2\">Id : </label>\n            <span className=\"col-sm-4\">{responseMessage.id}</span>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"message\" className=\"col-sm-2\">Recieved : </label>\n            <span className=\"col-sm-4\">{responseMessage.received}</span>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"ack\" className=\"col-sm-2\">Ack : </label>\n            <span className=\"col-sm-4\">{responseMessage.ack}</span>\n          </div>\n          <div className=\"row\">\n            <label htmlFor=\"statusCode\" className=\"col-sm-2\">Status Code : </label>\n            <span className=\"col-sm-4\">{responseMessage.statusCode}</span>\n          </div>\n           <div className=\"row\">\n            <label htmlFor=\"roundTripTimeMillis\" className=\"col-sm-2\">Round Trip Time(millis): </label>\n            <span className=\"col-sm-4\">{responseMessage.roundTripTimeMillis}</span>\n          </div>\n        </div>\n      }\n\n      {responseError &&\n        <div className=\"alert alert-warning\">\n          <div className=\"row\">\n            <span className=\"col-sm-4\">{responseError}</span>\n          </div>\n        </div>\n      }\n    </div>\n  </div>\n};\n\ninterface CallState {\n  payload: string;\n  delay: number;\n  responseCode: number;\n  formErrors: Record<string, string>\n  loading: boolean;\n  formValid: boolean;\n  responseMessage?: MessageAck;\n  responseError?: string;\n}\n\nexport const MainForm = ({ payload }: { payload: string }) => {\n  const [callState, setCallState] = useState<CallState>({\n    payload: \"dummy payload\",\n    delay: 100,\n    responseCode: 200,\n    formErrors: {},\n    loading: false,\n    formValid: true,\n    responseMessage: undefined,\n    responseError: undefined\n  });\n\n  const handleFormSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    if (callState.loading) {\n      e.preventDefault();\n      return;\n    }\n    setCallState(prevState => ({ ...prevState, responseError: undefined, responseMessage: undefined }));\n    passthroughCallAndSetState(callState.payload, callState.delay, callState.responseCode);\n    e.preventDefault()\n  }\n\n  const passthroughCallAndSetState = (payload: string, delay: number, responseCode: number = 200) => {\n    setCallState(prevState => ({ ...prevState, loading: true }));\n    restCalls\n      .makePassthroughCall({ payload: payload, delay: delay, responseCode: responseCode })\n      .then(resp => {\n        setCallState(prevState => ({ ...prevState, responseMessage: resp, loading: false }));\n      }).catch(error => {\n        setCallState(prevState => ({ ...prevState, responseError: error.message, loading: false }));\n      });\n  }\n\n  const handleUserInput = (e: React.ChangeEvent<HTMLTextAreaElement | HTMLInputElement>) => {\n    const name = e.target.name;\n    const value = e.target.value;\n    validateField(name, value)\n  }\n\n  const validateField = (fieldName: string, value: any) => {\n    let fieldValidationErrors = callState.formErrors;\n    let payloadValid = true;\n    let delayValid = true;\n\n    switch (fieldName) {\n      case 'payload':\n        payloadValid = value.length >= 2;\n        fieldValidationErrors.payload = payloadValid ? '' : ' should have atleast 2 characters';\n        break;\n      case 'delay':\n        delayValid = !isNaN(value) && Number(value) > 0;\n        fieldValidationErrors.delay = delayValid ? '' : ' is not valid';\n        break;\n      default:\n        break;\n    }\n    setCallState(prevState => ({\n      ...prevState,\n      [fieldName]: value,\n      formErrors: fieldValidationErrors,\n      formValid: payloadValid && delayValid\n    }));\n  }\n\n  return (\n    <div>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <h3>Send a request</h3>\n          <p className=\"lead alert alert-info\">\n            The request will be sent to the appication which will reply after the specified \"delay\"\n          </p>\n        </div>\n        <div>\n          <FormErrors formErrors={callState.formErrors} />\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col-sm-12\">\n          <form onSubmit={handleFormSubmit}>\n            <div className=\"form-group row mb-3\">\n              <label htmlFor=\"payload\" className=\"col-sm-2 col-form-label\">Payload</label>\n              <div className=\"col-sm-10\">\n                <textarea name=\"payload\" className=\"form-control\" placeholder=\"Payload\"\n                  onChange={handleUserInput} value={callState.payload}></textarea>\n              </div>\n            </div>\n            <div className=\"form-group row mb-3\">\n              <label htmlFor=\"delay\" className=\"col-sm-2 col-form-label\">Delay (in ms)</label>\n              <div className=\"col-sm-10\">\n                <input name=\"delay\" type=\"number\" className=\"form-control\" placeholder=\"delay\"\n                  value={callState.delay} onChange={handleUserInput} />\n\n              </div>\n            </div>\n            <div className=\"form-group row mb-3\">\n              <label htmlFor=\"delay\" className=\"col-sm-2 col-form-label\">Response Status Code</label>\n              <div className=\"col-sm-10\">\n                <input name=\"responseCode\" type=\"number\" className=\"form-control\" placeholder=\"status code\"\n                  value={callState.responseCode} onChange={handleUserInput} />\n\n              </div>\n            </div>\n            <div className=\"form-group row mb-3\">\n              <div className=\"col-sm-10\">\n                {!callState.loading &&\n                  <button name=\"submit\" className=\"btn btn-primary\" disabled={!callState.formValid}>Submit</button>\n                }\n                {callState.loading &&\n                  <button name=\"submit\" className=\"btn btn-primary disabled\"\n                    disabled={!callState.formValid}>Submit</button>\n                }\n              </div>\n            </div>\n          </form>\n        </div>\n      </div>\n      <ProgressBar loading={callState.loading} />\n      <ResponseDisplay responseMessage={callState.responseMessage} responseError={callState.responseError} />\n    </div>\n  );\n}","import React from \"react\";\nimport {BrowserRouter as Router, Link, Route} from \"react-router-dom\";\nimport {MainForm} from \"./main-view/MainView\"\n\n\nconst Root = () => (\n  <Router>\n    <div>\n      <nav className=\"navbar navbar-expand-md navbar-dark fixed-top bg-dark\">\n        <Link to=\"/\" className=\"navbar-brand\">Service To Service Call Client</Link>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\"\n                data-target=\"#navbarsExampleDefault\"\n                aria-controls=\"navbarsExampleDefault\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarsExampleDefault\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item active\">\n              <Link to=\"/\" className=\"nav-link\">Home</Link>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <div className=\"containerFluid\">\n        <div className=\"row\">\n          <div className=\"col-sm-10 offset-sm-1\">\n            <Route exact path=\"/\" component={MainForm}/>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  </Router>\n);\n\nexport default Root;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}